-Initializing the model
  The model will be initialized with the pre-trained weights from the ImageNet dataset, and the last fully connected layer will be excluded from the model architecture
  The loop that follows freezes the weights of all the layers in the VGG16 model by setting`i.trainable=False` for each layer in the model. This is done to prevent the 
  weights from being updated during training, as the model is already pre-trained on a large dataset.
  Finally, a `Flatten()` layer is added to the output of the VGG16 model to convert the output tensor into a 1D tensor.
  The resulting model can be used as a feature extractor for transfer learning or as a starting point for building a new model on top of it.

        Image_size=[224,224]
        
        sol=VGG16(input_shape=Image_size + [3], weights='imagenet', include_top = False)
        
        for i in sol.layers:
            i.trainable = False
        
        from tensorflow.keras.layers import Dense 
        from tensorflow.keras.activations import softmax


-Adding Fully connected Layers
  A dense layer is a deeply connected neural network layer. It is the most common and frequently used layer. The number of neurons in the Dense layer is the same as the
  number of classes in the training set.The neurons in the last Dense layer, use softmax activation to convert their outputs into respective probabilities.
  Understanding the model is a very important phase to properly use it for training and prediction purposes. Keras provides a simple method, summary to get the full 
  information about the model and its layer

          from tensorflow.keras.applications import VGG16
          from tensorflow.keras.layers import Flatten, Dense
          from tensorflow.keras.models import Model
          
          # Load VGG16 model without the top (classification layers)
          vgg16_base = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
          
          # Add custom layers on top of the VGG16 base
          x = Flatten()(vgg16_base.output)
          x = Dense(256, activation='relu')(x)
          x = Dense(6, activation='softmax')(x)
          
          # Create the final model
          vgg16_model = Model(inputs=vgg16_base.input, outputs=x)
          
          # Print the summary of the model
          vgg16_model.summary()


-Configure The Learning Process
  The compilation is the final step in creating a model. Once the compilation is done, we can move on to the training phase. The loss function is used to find errors or deviations 
  in the learning process. Keras requires a loss function during the model compilation process.
  Optimization is an important process that optimizes the input weights by comparing the prediction and the loss function. Here we are using adam optimizer.
  Metrics are used to evaluate the performance of your model. It is similar to the loss function, but not used in the training process.
  
          vgg16_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
        


-Train The model
  Now, let us train our model with our image dataset. The model is trained for 10 epochs and after every epoch, the current model state is saved if the model has the least loss encountered
  till that time. We can see that the training loss decreases in almost every epoch till 30 epochs and probably there is further scope to improve the model.
  fit_generator functions used to train a deep learning neural network.
  Arguments:
  steps_per_epoch: it specifies the total number of steps taken from the generator as soon as one epoch is finished and the next epoch has started. We can calculate the value of steps_per_epoch
  as the total number of samples in your dataset divided by the batch size.
  Epochs: an integer and number of epochs we want to train our model for.
  validation_data can be either:
                =an inputs and targets list
                =a generator
                =an inputs, targets, and sample_weights list which can be used to evaluate the loss and metrics for any model after any epoch has ended.
  validation_steps: only if the validation_data is a generator then only this argument can be used. It specifies the total number of steps taken from the generator before it is
  stopped at every epoch and its value is calculated as the total number of validation data points in your dataset divided by the validation batch size.
  
-Save the Model
  The model is saved with .h5 extension as follows.
  An H5 file is a data file saved in the Hierarchical Data Format (HDF). It contains multidimensional arrays of scientific data.

-Test The model
  Evaluation is a process during the development of the model to check whether the model is the best fit for the given problem and corresponding data.
