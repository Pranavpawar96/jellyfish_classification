-Importing the Model Building Libraries
-Importing the necessary libraries
    
      import tensorflow as tf
      from tensorflow import keras
      from tensorflow.keras.preprocessing.image import ImageDataGenerator
      from tensorflow.keras.layers import Dense
      from tensorflow.keras.activations import softmax
      from tensorflow.keras import activations


-Importing the VGG16 model
  To initialize the VGG16 model, the weights are usually pre-trained on the ImageNet dataset, which is a large-scale dataset of images belonging to 1,000 different
  categories. These pre-trained weights can be downloaded from the internet, and they can be used as a starting point to fine-tune the model for a specific task,
  such as object recognition or classification.
     
      from tensorflow.keras.applications.vgg16 import VGG16
      from tensorflow.keras.layers import Flatten


-Initializing the model
  The model will be initialized with the pre-trained weights from the ImageNet dataset, and the last fully connected layer will be excluded from the model architecture
  The loop that follows freezes the weights of all the layers in the VGG16 model by setting`i.trainable=False` for each layer in the model. This is done to prevent the 
  weights from being updated during training, as the model is already pre-trained on a large dataset.
  Finally, a `Flatten()` layer is added to the output of the VGG16 model to convert the output tensor into a 1D tensor.
  The resulting model can be used as a feature extractor for transfer learning or as a starting point for building a new model on top of it.

        Image_size=[224,224]
        
        sol=VGG16(input_shape=Image_size + [3], weights='imagenet', include_top = False)
        
        for i in sol.layers:
            i.trainable = False
        
        from tensorflow.keras.layers import Dense 
        from tensorflow.keras.activations import softmax
